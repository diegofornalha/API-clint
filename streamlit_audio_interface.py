import streamlit as st
import os
import base64
import requests
import tempfile
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, List, Any
from dotenv import load_dotenv

# Configura√ß√£o de logging simples
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger("streamlit_interface")

# Carrega vari√°veis do arquivo .env
env_path = Path('.') / '.env'
load_dotenv(env_path)

class Config:
    """Configura√ß√µes da aplica√ß√£o"""
    
    # Clint API
    CLINT_API_TOKEN: str = os.getenv('CLINT_API_TOKEN', '')
    
    # Z-API
    ZAPI_INSTANCE_ID: str = os.getenv('ZAPI_INSTANCE_ID', '')
    ZAPI_TOKEN: str = os.getenv('ZAPI_TOKEN', '')
    ZAPI_SECURITY_TOKEN: str = os.getenv('ZAPI_SECURITY_TOKEN', '')
    
    # WhatsApp Numbers
    ZAPI_SENDER_NUMBER: str = os.getenv('ZAPI_SENDER_NUMBER', '')
    DEFAULT_CLIENT_NUMBER: str = os.getenv('DEFAULT_CLIENT_NUMBER', '')
    TEST_NUMBERS: dict = {
        'primary': os.getenv('TEST_NUMBER_PRIMARY', ''),
        'secondary': os.getenv('TEST_NUMBER_SECONDARY', '')
    }
    
    @classmethod
    def validate(cls) -> Optional[str]:
        """
        Valida se todas as configura√ß√µes necess√°rias est√£o presentes
        
        Returns:
            Mensagem de erro se alguma configura√ß√£o estiver faltando, None caso contr√°rio
        """
        missing = []
        
        if not cls.ZAPI_INSTANCE_ID:
            missing.append("ZAPI_INSTANCE_ID")
        
        if not cls.ZAPI_TOKEN:
            missing.append("ZAPI_TOKEN")
        
        if not cls.ZAPI_SECURITY_TOKEN:
            missing.append("ZAPI_SECURITY_TOKEN")
        
        if missing:
            return f"Configura√ß√µes ausentes: {', '.join(missing)}"
        
        return None
    
    @classmethod
    def get_zapi_base_url(cls) -> str:
        """Retorna a URL base do Z-API"""
        return f"https://api.z-api.io/instances/{cls.ZAPI_INSTANCE_ID}/token/{cls.ZAPI_TOKEN}"
    
    @classmethod
    def update_config(cls, config_dict: Dict[str, str]) -> None:
        """Atualiza as configura√ß√µes com base em um dicion√°rio"""
        for key, value in config_dict.items():
            if hasattr(cls, key):
                setattr(cls, key, value)
                os.environ[key] = value

def encode_audio_to_base64(audio_path: str) -> str:
    """Converte um arquivo de √°udio para base64"""
    try:
        with open(audio_path, 'rb') as audio_file:
            encoded_string = base64.b64encode(audio_file.read()).decode('utf-8')
            return encoded_string
    except Exception as e:
        logger.error(f"Erro ao codificar √°udio: {str(e)}")
        return None

def send_audio(audio_file, phone_numbers):
    """
    Fun√ß√£o que processa o envio do √°udio via Z-API
    
    Args:
        audio_file: Caminho para o arquivo de √°udio
        phone_numbers: N√∫mero(s) de telefone para envio (string ou lista)
    
    Returns:
        Dict com resultados do envio
    """
    results = {}
    
    # Normaliza para lista de telefones
    if isinstance(phone_numbers, str):
        # Divide a string por v√≠rgulas e remove espa√ßos
        phone_list = [p.strip() for p in phone_numbers.split(',')]
    else:
        phone_list = phone_numbers
    
    # Filtra n√∫meros vazios
    phone_list = [p for p in phone_list if p]
    
    if not audio_file or not phone_list:
        return {"status": "error", "message": "Por favor, forne√ßa um arquivo de √°udio e pelo menos um n√∫mero de telefone."}
    
    try:
        # Verifica se a configura√ß√£o √© v√°lida
        error = Config.validate()
        if error:
            return {"status": "error", "message": f"Erro de configura√ß√£o: {error}"}
        
        # URL base da API
        base_url = Config.get_zapi_base_url()
            
        # Converte o √°udio para base64
        base64_audio = encode_audio_to_base64(audio_file)
        if not base64_audio:
            return {"status": "error", "message": "Falha ao converter √°udio para base64"}
        
        # Headers da requisi√ß√£o
        headers = {
            "Client-Token": Config.ZAPI_SECURITY_TOKEN,
            "Content-Type": "application/json"
        }
        
        # Para cada n√∫mero na lista
        for phone in phone_list:
            # Remove caracteres n√£o num√©ricos do telefone
            clean_phone = ''.join(filter(str.isdigit, phone))
            
            if not clean_phone:
                results[phone] = {"status": "error", "message": "N√∫mero de telefone inv√°lido"}
                continue
            
            # Payload da requisi√ß√£o
            payload = {
                "phone": clean_phone,
                "audio": base64_audio,
                "waveform": True
            }
            
            # Envia o √°udio
            logger.info(f"Enviando √°udio para {clean_phone}...")
            response = requests.post(
                f"{base_url}/send-audio",
                headers=headers,
                json=payload
            )
            
            # Verifica a resposta
            if response.status_code == 200:
                result = response.json()
                results[phone] = {
                    "status": "success",
                    "zaapId": result.get('zaapId', ''),
                    "messageId": result.get('messageId', '')
                }
            else:
                results[phone] = {
                    "status": "error",
                    "message": f"Erro ao enviar √°udio: {response.text}"
                }
                
    except Exception as e:
        logger.error(f"Erro: {str(e)}")
        return {"status": "error", "message": f"Erro: {str(e)}"}
    
    # Retorna resultados completos
    return {
        "status": "complete",
        "results": results,
        "summary": {
            "total": len(phone_list),
            "success": sum(1 for r in results.values() if r.get("status") == "success"),
            "failed": sum(1 for r in results.values() if r.get("status") == "error")
        }
    }

def save_uploaded_file(uploaded_file):
    """Salva o arquivo carregado em um arquivo tempor√°rio"""
    try:
        # Cria um arquivo tempor√°rio
        temp_dir = tempfile.mkdtemp()
        temp_path = os.path.join(temp_dir, uploaded_file.name)
        
        # Salva o arquivo
        with open(temp_path, "wb") as f:
            f.write(uploaded_file.getbuffer())
            
        return temp_path
    except Exception as e:
        logger.error(f"Erro ao salvar arquivo tempor√°rio: {str(e)}")
        return None

def save_env_file(config_data):
    """Salva os dados de configura√ß√£o em um arquivo .env"""
    try:
        with open('.env', 'w') as f:
            for key, value in config_data.items():
                if value:  # S√≥ escreve se tiver valor
                    f.write(f"{key}={value}\n")
        return True
    except Exception as e:
        logger.error(f"Erro ao salvar arquivo .env: {str(e)}")
        return False

def load_env_to_session():
    """Carrega as vari√°veis de ambiente para a sess√£o do Streamlit"""
    if not hasattr(st.session_state, 'config'):
        st.session_state.config = {
            'ZAPI_INSTANCE_ID': Config.ZAPI_INSTANCE_ID,
            'ZAPI_TOKEN': Config.ZAPI_TOKEN,
            'ZAPI_SECURITY_TOKEN': Config.ZAPI_SECURITY_TOKEN,
            'ZAPI_SENDER_NUMBER': Config.ZAPI_SENDER_NUMBER,
            'DEFAULT_CLIENT_NUMBER': Config.DEFAULT_CLIENT_NUMBER,
            'TEST_NUMBER_PRIMARY': Config.TEST_NUMBERS.get('primary', ''),
            'TEST_NUMBER_SECONDARY': Config.TEST_NUMBERS.get('secondary', '')
        }

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Envio de √Åudio via Z-API",
    page_icon="üéµ",
    layout="wide"
)

# Carrega as vari√°veis de ambiente para a sess√£o
load_env_to_session()

# Barra lateral para configura√ß√µes
with st.sidebar:
    st.title("‚öôÔ∏è Configura√ß√µes")
    
    # Expander para configura√ß√µes da API
    with st.expander("Configura√ß√£o da API Z-API"):
        st.caption("Configure suas credenciais da Z-API")
        
        # Campos de configura√ß√£o
        instance_id = st.text_input("Instance ID", value=st.session_state.config.get('ZAPI_INSTANCE_ID', ''), key="config_instance_id")
        token = st.text_input("Token", value=st.session_state.config.get('ZAPI_TOKEN', ''), key="config_token")
        security_token = st.text_input("Security Token", value=st.session_state.config.get('ZAPI_SECURITY_TOKEN', ''), type="password", key="config_security_token")
        sender_number = st.text_input("N√∫mero do Remetente", value=st.session_state.config.get('ZAPI_SENDER_NUMBER', ''), key="config_sender")
        
        # Bot√£o para salvar configura√ß√£o
        if st.button("üíæ Salvar Configura√ß√£o"):
            # Atualiza a sess√£o
            config_data = {
                'ZAPI_INSTANCE_ID': instance_id,
                'ZAPI_TOKEN': token,
                'ZAPI_SECURITY_TOKEN': security_token,
                'ZAPI_SENDER_NUMBER': sender_number
            }
            
            # Atualiza a sess√£o e o objeto Config
            st.session_state.config.update(config_data)
            Config.update_config(config_data)
            
            # Salva no arquivo .env
            if save_env_file(st.session_state.config):
                st.success("‚úÖ Configura√ß√£o salva com sucesso!")
            else:
                st.error("‚ùå Erro ao salvar configura√ß√£o!")

# T√≠tulo e descri√ß√£o principal
st.title("üéµ Envio de √Åudio via WhatsApp")
st.subheader("Envie √°udios para qualquer n√∫mero do WhatsApp usando a Z-API")

# Tabs para diferentes funcionalidades
tab1, tab2 = st.tabs(["üì± Envio Individual", "üì¢ Envio em Massa"])

with tab1:
    # Layout em colunas para envio individual
    col1, col2 = st.columns([3, 2])

    with col1:
        # Upload de arquivo de √°udio
        st.subheader("Carregar arquivo de √°udio")
        uploaded_file = st.file_uploader("Selecione um arquivo de √°udio", type=["mp3", "wav", "ogg"], key="upload_individual")
        
        # Separador
        st.divider()
        
        # Entrada para o n√∫mero de telefone
        phone_number = st.text_input(
            "N√∫mero do WhatsApp (ex: 5521999999999)",
            placeholder="Digite o n√∫mero com DDI e DDD",
            key="phone_individual"
        )
        
        # Bot√£o de envio
        if st.button("üì§ Enviar √Åudio", type="primary", key="send_individual"):
            if uploaded_file:
                # Mostrar spinner durante o processamento
                with st.spinner("Enviando √°udio..."):
                    # Salvar o arquivo temporariamente
                    temp_file_path = save_uploaded_file(uploaded_file)
                    if temp_file_path:
                        # Enviar o √°udio
                        result = send_audio(temp_file_path, phone_number)
                        
                        # Mostrar o resultado em um estado de sess√£o para persistir entre recarregamentos
                        st.session_state.result_individual = result
                    else:
                        st.session_state.result_individual = {"status": "error", "message": "Erro ao processar o arquivo de √°udio."}
            else:
                st.session_state.result_individual = {"status": "error", "message": "Por favor, selecione um arquivo de √°udio."}

    with col2:
        # √Årea de resultado
        st.subheader("Status do Envio")
        
        # Verificar e exibir o resultado (se existir)
        if 'result_individual' in st.session_state:
            result = st.session_state.result_individual
            if result.get("status") == "complete":
                st.success("‚úÖ Processamento conclu√≠do!")
                
                for phone, phone_result in result.get("results", {}).items():
                    if phone_result.get("status") == "success":
                        st.success(f"‚úÖ Enviado para {phone}: ID {phone_result.get('messageId', '')}")
                    else:
                        st.error(f"‚ùå Falha para {phone}: {phone_result.get('message', '')}")
                        
            elif "success" in result.get("status", ""):
                st.success(f"‚úÖ √Åudio enviado com sucesso!")
                if "results" in result:
                    st.json(result["results"])
            else:
                st.error(result.get("message", "Erro desconhecido no envio"))
        else:
            st.info("O resultado do envio aparecer√° aqui.")

with tab2:
    # Layout para envio em massa
    st.subheader("Envio em Massa")
    
    col1, col2 = st.columns([3, 2])
    
    with col1:
        # Upload de arquivo de √°udio
        st.subheader("Carregar arquivo de √°udio")
        mass_uploaded_file = st.file_uploader("Selecione um arquivo de √°udio", type=["mp3", "wav", "ogg"], key="upload_mass")
        
        # Separador
        st.divider()
        
        # Entrada para m√∫ltiplos n√∫meros de telefone
        mass_phone_numbers = st.text_area(
            "N√∫meros de WhatsApp (separados por v√≠rgula)",
            placeholder="Digite os n√∫meros com DDI e DDD, separados por v√≠rgula\nEx: 5521999999999, 5531888888888",
            height=150,
            key="phones_mass"
        )
        
        # Bot√£o de envio em massa
        if st.button("üì§ Enviar para Todos", type="primary", key="send_mass"):
            if mass_uploaded_file and mass_phone_numbers:
                # Mostrar spinner durante o processamento
                with st.spinner("Enviando √°udios para m√∫ltiplos destinat√°rios..."):
                    # Salvar o arquivo temporariamente
                    temp_file_path = save_uploaded_file(mass_uploaded_file)
                    if temp_file_path:
                        # Enviar o √°udio para m√∫ltiplos n√∫meros
                        result = send_audio(temp_file_path, mass_phone_numbers)
                        
                        # Mostrar o resultado em um estado de sess√£o para persistir entre recarregamentos
                        st.session_state.result_mass = result
                    else:
                        st.session_state.result_mass = {"status": "error", "message": "Erro ao processar o arquivo de √°udio."}
            else:
                if not mass_uploaded_file:
                    st.session_state.result_mass = {"status": "error", "message": "Por favor, selecione um arquivo de √°udio."}
                else:
                    st.session_state.result_mass = {"status": "error", "message": "Por favor, insira pelo menos um n√∫mero de telefone."}
    
    with col2:
        # √Årea de resultado para envio em massa
        st.subheader("Status do Envio em Massa")
        
        # Verificar e exibir o resultado (se existir)
        if 'result_mass' in st.session_state:
            result = st.session_state.result_mass
            
            if result.get("status") == "complete":
                summary = result.get("summary", {})
                
                # Exibe resumo
                st.success(f"‚úÖ Processamento conclu√≠do!")
                st.metric("Total de envios", summary.get("total", 0))
                col_success, col_fail = st.columns(2)
                with col_success:
                    st.metric("Enviados com sucesso", summary.get("success", 0))
                with col_fail:
                    st.metric("Falhas", summary.get("failed", 0))
                
                # Detalhes por n√∫mero
                with st.expander("Ver detalhes por n√∫mero"):
                    for phone, phone_result in result.get("results", {}).items():
                        if phone_result.get("status") == "success":
                            st.success(f"‚úÖ Enviado para {phone}: ID {phone_result.get('messageId', '')}")
                        else:
                            st.error(f"‚ùå Falha para {phone}: {phone_result.get('message', '')}")
            else:
                st.error(result.get("message", "Erro desconhecido no envio em massa"))
        else:
            st.info("O resultado do envio aparecer√° aqui.")

# Rodap√© compartilhado
st.divider()

# Informa√ß√µes adicionais
with st.expander("‚ÑπÔ∏è Informa√ß√µes"):
    st.markdown("""
    **Formatos suportados:**
    - MP3
    - WAV
    - OGG
    
    **Requisitos:**
    - Tamanho m√°ximo: 16MB
    - O n√∫mero deve incluir o c√≥digo do pa√≠s (ex: 55 para Brasil)
    - Para envios em massa, separe os n√∫meros por v√≠rgula
    """)

st.caption(f"Atualizado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
st.caption("API Clint - Integra√ß√£o com Z-API") 