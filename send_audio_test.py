import os
import requests
import json
import base64
from clint_api.utils.logger import APILogger
from clint_api.utils.config import Config
from clint_api.utils.zapi_helpers import encode_media_to_base64

# Configura o logger
logger = APILogger("send_audio_test")

def encode_audio_to_base64(file_path: str) -> str:
    """Codifica um arquivo de √°udio para base64"""
    return encode_media_to_base64(file_path)

def main():
    """Fun√ß√£o principal"""
    # Verifica se a configura√ß√£o √© v√°lida
    error = Config.validate()
    if error:
        logger.error(f"‚ùå Erro de configura√ß√£o: {error}")
        return
    
    # URL base da API
    base_url = Config.get_zapi_base_url()
    
    # N√∫mero para teste
    TEST_NUMBER = Config.get_test_number('primary')
    
    # Caminho do arquivo de √°udio
    AUDIO_PATH = Config.AUDIO_TEST_PATH or "/Users/chain/Desktop/miniapp/API-clint/poema.mp3"
    
    try:
        # Verifica se o arquivo existe
        if not os.path.exists(AUDIO_PATH):
            logger.error(f"‚ùå Arquivo n√£o encontrado: {AUDIO_PATH}")
            return
            
        # Converte o √°udio para base64
        logger.info("\nüìù Convertendo √°udio para base64...")
        base64_audio = encode_audio_to_base64(AUDIO_PATH)
        
        if not base64_audio:
            logger.error("‚ùå Falha ao converter √°udio para base64")
            return
        
        # Headers da requisi√ß√£o
        headers = {
            "Client-Token": Config.ZAPI_SECURITY_TOKEN,
            "Content-Type": "application/json"
        }
        
        # Payload da requisi√ß√£o
        payload = {
            "phone": TEST_NUMBER,
            "audio": base64_audio,
            "waveform": True  # Opcional: mostra a forma de onda do √°udio
        }
        
        # Envia o √°udio
        logger.info(f"\nüì± Enviando √°udio para {TEST_NUMBER}...")
        response = requests.post(
            f"{base_url}/send-audio",
            headers=headers,
            json=payload
        )
        
        # Verifica a resposta
        if response.status_code == 200:
            result = response.json()
            logger.info("\n‚úÖ √Åudio enviado com sucesso!")
            logger.info(f"zaapId: {result.get('zaapId')}")
            logger.info(f"messageId: {result.get('messageId')}")
        else:
            logger.error(f"\n‚ùå Erro ao enviar √°udio: {response.text}")
            
    except Exception as e:
        logger.error(f"\n‚ùå Erro: {str(e)}")

if __name__ == "__main__":
    main() 